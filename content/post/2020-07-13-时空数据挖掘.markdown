---
layout:     post
title:      时空数据挖掘
subtitle:   时空间数据的挖掘：overview
date:       2020-07-13
author:     Bingo
header-img: img/trajectory-data-mining.png
catalog: true
tags:
    - 机器学习
    - 数据挖掘
    - 城市计算
---

> 自己不能胜任的事情，切莫轻易答应别人，一旦答应了别人，就必须实践自己的诺言。—— 华盛顿

# 时空挖掘概要

## 时空数据整体介绍
## ![image.png](https://intranetproxy.alipay.com/skylark/lark/0/2020/png/230552/1594631114555-d2a5e62f-b567-45b6-8b90-4ecd60c51b58.png#align=left&display=inline&height=448&margin=%5Bobject%20Object%5D&name=image.png&originHeight=896&originWidth=1096&size=422517&status=done&style=none&width=548)
## 时空数据


## 时空数据的处理方法
### 噪声过滤


1、中值滤波器（Mean Filter）


- 均值滤波
图片中一个方块区域（一般为3*3）内，中心点的像素为全部点像素值的平均值。均值滤波就是对于整张图片进行以上操作。
缺陷：均值滤波本身存在着固有的缺陷，即它不能很好地保护图像细节，在图像去噪的同时也破坏了图像的细节部分，从而使图像变得模糊，不能很好地去除噪声点。特别是椒盐噪声。
- 中值滤波
与均值滤波类似，不过这次取的不是平均值，而是中位数。



均值滤波和和中值滤波都可以起到平滑图像，虑去噪声的功能。
均值滤波采用线性的方法，平均整个窗口范围内的像素值，均值滤波本身存在着固有的缺陷，即它不能很好地保护图像细节，在图像去噪的同时也破坏了图像的细节部分，从而使图像变得模糊，不能很好地去除噪声点。均值滤波对高斯噪声表现较好，对椒盐噪声表现较差。
中值滤波采用非线性的方法，它在平滑脉冲噪声方面非常有效,同时它可以保护图像尖锐的边缘，选择适当的点来替代污染点的值，所以处理效果好，对椒盐噪声表现较好，对高斯噪声表现较差。

2、卡尔曼滤波器（Kalman Filter）or 粒子滤波器（Particle filter）


> 卡爾曼濾波是一種高效率的遞歸濾波器，它能夠從一系列的不完全及包含雜訊的測量中，估計動態系統的狀態。卡爾曼濾波會根據各測量量在不同時間下的值，考慮各時間下的聯合分布，再產生對未知變數的估計，因此會比只以單一測量量為基礎的估計方式要準。卡爾曼濾波得名自主要貢獻者之一的魯道夫·卡爾曼。 卡爾曼濾波在技術領域有許多的應用。 --- wiki
> 


其基本思想是：以最小均方误差为最佳估计准则，采用信号与噪声的状态空间模型，利用前一时刻的估计值和当前时刻的观测值来更新对状态变量的估计，求出当前时刻的估计值，算法根据建立的系统方程和观测方程对需要处理的信号做出满足最小均方误差的估计。


处理极端错误时，中值滤波器比均值滤波器效果更好。当轨迹的采样率非常低时（即两个连续点之间的距离可能长于几百米），均值和中值滤波器不再是不错的选择。
卡尔曼和粒子滤波器可以对测量噪声和轨迹动力学进行建模。但是，它们取决于初始位置的测量。如果轨迹的第一个点有噪声，则两个滤波器的效率会大大降低。


3、基于启发式的离群值检测
使用离群值检测，从样本中直接筛选出噪声数据。例如**T-Drive**和**GeoLife**。


### 驻留点检测
![image.png](https://intranetproxy.alipay.com/skylark/lark/0/2020/png/230552/1594630997623-2c1729a4-b09b-4164-af98-45cec8c2f25f.png#align=left&display=inline&height=178&margin=%5Bobject%20Object%5D&name=image.png&originHeight=356&originWidth=1002&size=230988&status=done&style=none&width=501)

- A Single Point Location
用户在一个位置停留了一段时间，例如家、加油站这种停留时基本不会移动的点
- 环绕停留点
用户在一个区域停留了一段时间，例如商场、公园、学校（可以理解为面积比上述停留点较大，体现为环状定位）


通过驻留点检测可以帮助我们进行：旅行建议、目的地预测、出租车推荐、耗油量预测、导航建议等。


### 轨迹压缩


如果针对每条轨迹都记录所有的轨迹点显然是不切实际且会造成很大的存储压力的，这时候就需要使用轨迹压缩，用较少的数据点尽可能表示完整的轨迹信息。


- 距离度量：
   - 垂直的欧式距离；
   - 与时间信息同步的欧式距离；

![image.png](https://intranetproxy.alipay.com/skylark/lark/0/2020/png/230552/1594631054132-4dc2b34c-57fe-4699-bff5-32e0a66a6a01.png#align=left&display=inline&height=186&margin=%5Bobject%20Object%5D&name=image.png&originHeight=372&originWidth=1300&size=178242&status=done&style=none&width=650)

- 离线压缩：批处理的方式，在轨迹数据完全产生后进行压缩，如Douglas-Peucker；
- 在线压缩：当对象移动时，立即压缩轨迹，如Sliding Window algorithm；

![image.png](https://intranetproxy.alipay.com/skylark/lark/0/2020/png/230552/1594631082541-c2804fcd-4d19-4734-8c3f-001320334cd0.png#align=left&display=inline&height=185&margin=%5Bobject%20Object%5D&name=image.png&originHeight=370&originWidth=1204&size=202538&status=done&style=none&width=602)

- 语义压缩：压缩轨迹时，尽量保留完整的语义信息，如Trajectory Simplification (TS) algorithm 或 PRESS [Song et al. 2014]。



### 轨迹分割
![image.png](https://intranetproxy.alipay.com/skylark/lark/0/2020/png/230552/1594631256754-0d8c4582-0278-4a8e-81cd-bb96d42bbf35.png#align=left&display=inline&height=240&margin=%5Bobject%20Object%5D&name=image.png&originHeight=480&originWidth=922&size=186093&status=done&style=none&width=461)
在对轨迹进行分类或聚类之前，我们往往需要现将轨迹分割为几个部分。


- 基于时间进行分割(Time)：可以通过给定的阈值或者相同的时间段进行分割策略；
- 基于轨迹的形状进行分割(Turning)：可以通过方向改变的阈值点进行分割；
- 基于语义挖掘点进行分割：如Fig 6d中，发现了驻留点p4 ---> p7，通过这个驻留点进行分割；或者也可以根据不同的出行方式(步行、骑车、开车等)进行轨迹分割(如Fig 7所示)；

![image.png](https://intranetproxy.alipay.com/skylark/lark/0/2020/png/230552/1594631675806-a357a239-edf9-4b63-a131-14ccac650f20.png#align=left&display=inline&height=306&margin=%5Bobject%20Object%5D&name=image.png&originHeight=612&originWidth=862&size=178605&status=done&style=none&width=431)
### 地图匹配
地图匹配用来将原始的一连串经纬度坐标转换为路段。

- 基于额外信息的方法：如几何信息、拓扑结构、基于概率等；
- 在轨迹中考虑的采样点范围
## 时空数据的管理
### 轨迹索引与检索
用来查询的两种主要方法：
![image.png](https://intranetproxy.alipay.com/skylark/lark/0/2020/png/230552/1594690248384-0e78c810-1677-4949-9f36-e7d297c50ba3.png#align=left&display=inline&height=170&margin=%5Bobject%20Object%5D&name=image.png&originHeight=340&originWidth=1014&size=195203&status=done&style=none&width=507)

- KNN-检索：用来找到最近的K个点；

![image.png](https://intranetproxy.alipay.com/skylark/lark/0/2020/png/230552/1594691393765-6c4bcb85-62c1-4078-9012-39c6ab1514dd.png#align=left&display=inline&height=230&margin=%5Bobject%20Object%5D&name=image.png&originHeight=460&originWidth=1020&size=219572&status=done&style=none&width=510)

- 基于范围的检索：例如我们可以在过去一个月的下午2点至下午4点之间经过给定矩形区域R的车辆轨迹（Fig 9(a)）;这种方法常应用在对行驶速度和交通流量的数据挖掘中；常见的方法包括：
   - 3D-RTree、ST-RTree、TB-tree
   - R-Tree、Rt-Tree、HR-Tree、H+R-Tree
   - B+Tree、CSE-tree

![image.png](https://intranetproxy.alipay.com/skylark/lark/0/2020/png/230552/1594690787335-401b2289-8174-47fe-a115-883cc7228a47.png#align=left&display=inline&height=181&margin=%5Bobject%20Object%5D&name=image.png&originHeight=362&originWidth=936&size=152070&status=done&style=none&width=468)
### 轨迹的距离和相似度

- 点q到轨迹A的距离一般是q到A的垂线距离，如Fig 9b中q1到p2的距离；
- 两段轨迹之间的距离通常使用轨迹点上的距离集合；
   - Closest-pair distance(CPD)：用来计算两端轨迹上最近的点的距离；
   - Sum-of-pairs distance(SPD)：对于长度相同的两段轨迹，使用相应点的距离总和；
   - Dynamic Time Wrapping(DTW) distance：允许对多次重复的样本点进行重复计算，以保证轨迹的语义特性，（由于不满足轨迹不等式，因此无法用来进行度量计算）；
   - Longest Common Subsequence(LCSS): 可以通过控制阈值的方式跳过一些噪声样本点的计算；
   - Edit Distance on Real Sequence(EDR) distance: 与LCSS蕾丝，使用阈值匹配的方式计算两个匹配的子轨迹间的距离，可以用来对不确定的轨迹进行“修剪”；
   - Edit Distance with Real Penalty(ERP) distance：结合了DTW和EDR，使用恒定的参考点计算距离；
   - K-BCT：结合了DTW和LCSS，可以重复使用一些轨迹点，并且跳过一些噪声和不匹配的轨迹点。
- Minimum Bounding Rectangles(MBR): 用来计算两个轨迹段之间的距离；
- Trajectory-Hausdorff Distance(DHaus): 使用了三项的加权和：

![image.png](https://intranetproxy.alipay.com/skylark/lark/0/2020/png/230552/1594693531152-c17d2c8b-ea0c-4038-8cf0-c82a355e51f3.png#align=left&display=inline&height=96&margin=%5Bobject%20Object%5D&name=image.png&originHeight=192&originWidth=1512&size=93677&status=done&style=none&width=756)

   - 垂直总距离；
   - 长度差异的总平行距离；
   - 方向差异的角距离；

![image.png](https://intranetproxy.alipay.com/skylark/lark/0/2020/png/230552/1594693490987-2e998aca-dd12-4746-a15c-1df46ac12172.png#align=left&display=inline&height=165&margin=%5Bobject%20Object%5D&name=image.png&originHeight=330&originWidth=920&size=149566&status=done&style=none&width=460)
## 时空数据中的不确定性
### 减少轨迹数据中的不确定性
![image.png](https://intranetproxy.alipay.com/skylark/lark/0/2020/png/230552/1594694080551-588b5bae-2023-441b-9175-0692b7d8e5be.png#align=left&display=inline&height=198&margin=%5Bobject%20Object%5D&name=image.png&originHeight=396&originWidth=978&size=257589&status=done&style=none&width=489)

- 对查询轨迹的不确定性进行建模
- 不确定轨迹的路径推断
### 轨迹数据中的隐私问题

- 基于位置的时序服务：例如用户搜索附近的餐厅，如何保护用户的具体定位信息；
   - Spatial Cloaking
   - Mix Zones
   - Path Confusion
   - 基于短IDs的欧拉直方图
   - 虚拟轨迹
- 历史轨迹信息的公开：如果暴露过多的用户轨迹信息，可能会暴露用户的住址和工作地等，这种场景下，保护用户信息的方法包括：
   - 基于聚类的；
   - generalization-based；
   - suppression-based；
   - grid-based；
## 轨迹数据的模式挖掘
从一条或一组轨迹数据中，挖掘轨迹模式。
### 同步移动模式
该领域用来发现一组在特定时间段内一起移动的目标，如_flock、swarm、traveling companion、gathering_等。这类模式挖掘可以帮助我们研究物种迁移、军事监视、交通事件检测等问题。
![image.png](https://intranetproxy.alipay.com/skylark/lark/0/2020/png/230552/1594707022943-bf6e9c04-fc52-4a03-87e7-4beac5245ee8.png#align=left&display=inline&height=251&margin=%5Bobject%20Object%5D&name=image.png&originHeight=502&originWidth=1130&size=234046&status=done&style=none&width=565)

- flock: 一组用户指定大小的对象，至少要有连续k个时间戳，不过对于已经预定义的圆形区域可能无法描述组的真实形状，所以被成为“lossy-flock problem”；
- convoy：为了避免对移动的组的大小和形状进行过多的限制，convoy基于密度的聚类方法来获取任意形状的轨迹模式；convoy和flock都对数据的时序性有所要求；
- swarm：需要一组连续k个时间戳对象（不连续的也可以）；
- traveling companion：使用一种一连串的叫traveling buddy的数据结构来从轨迹中找寻类似convoy/swarm的模式，可以是为一种convoy/swarm的动态方法；
- gathering：用来检测一些例如游行或庆祝活动等事件，同时，还要求检测图案的几何特性如位置、形状的相对稳定性；
### 轨迹聚类
![image.png](https://intranetproxy.alipay.com/skylark/lark/0/2020/png/230552/1594707606447-4f85dea8-25a0-48b4-b59c-fe71ef206472.png#align=left&display=inline&height=173&margin=%5Bobject%20Object%5D&name=image.png&originHeight=346&originWidth=1164&size=424609&status=done&style=none&width=582)

- 基于回归模型和EM算法结合：该算法使用两个完整轨迹间的总距离对轨迹进行聚类；
- 将轨迹分段，并使用Trajectory-Hausdorff距离计算方法构建闭合轨迹段组；
### 从轨迹中挖掘顺序模式
从一条或多条轨迹中挖掘序贯模式(the sequential patterns)

- the sequential patterns（序贯模式）：指一定数量的移动对象在相似的时间间隔内一相同的位置序列行进，(比如行人在过马路时都要走斑马线，且大部分人行走的速度是一样的)，行程顺序中的位置不必连续，例如轨迹A和轨迹B，具有一段公共的序列：l1->l2->l4(即使轨迹A中l2和l4不是连续的也可以)：

![image.png](https://intranetproxy.alipay.com/skylark/lark/0/2020/png/230552/1594708195825-35e939b6-9016-48e3-9f66-4241d1ca4f02.png#align=left&display=inline&height=53&margin=%5Bobject%20Object%5D&name=image.png&originHeight=106&originWidth=734&size=27390&status=done&style=none&width=367)
通过对轨迹序列模式的研究可以帮助我们进行更加有效的旅行建议、生活模式的理解、下一个位置的预测、用户相似度匹配、轨迹压缩等。但是在真实的GPS轨迹中，每个点都有一对GPS坐标，且它们很难相同，这无疑会给计算和存储都带来巨大的压力。

- 在Free Space中挖掘序列模式：

![image.png](https://intranetproxy.alipay.com/skylark/lark/0/2020/png/230552/1594708799146-97ced776-1ae2-44ee-a1cf-05a42b61d48c.png#align=left&display=inline&height=190&margin=%5Bobject%20Object%5D&name=image.png&originHeight=380&originWidth=1166&size=245869&status=done&style=none&width=583)

   - 基于直线简化的方法
   - 给予聚类的方法：通过聚类方法，比如找到驻留点，并将周围的样本都归一化到驻留点上，减少样本点差异的总量；
- 在路网中的轨迹数据挖掘：
   - Suffix Tree
   - Huffman Encoding
### 从轨迹中挖掘周期模式
挖掘一些具备活动规律的对象，比如人们每周末都会去商场；动物们每年都会进行迁徙等。挖掘周期行为可以帮助压缩轨迹数据和预测移动物体的未来运动轨迹。

- 基于时间序列数据的研究
## 轨迹分类

1. 轨迹分割：使用分割方法划分轨迹为轨迹段；
1. 特征提取：从每个轨迹段提取特征；
1. 训练模型：构建对每个轨迹段进行分类的模型，常用的模型包括；
   1. 动态贝叶斯；
   1. 隐马尔可夫模型；
   1. 条件随机场；

![image.png](https://intranetproxy.alipay.com/skylark/lark/0/2020/png/230552/1594805334129-8877a892-ec77-4974-bb04-6e7af1f7de0b.png#align=left&display=inline&height=199&margin=%5Bobject%20Object%5D&name=image.png&originHeight=398&originWidth=948&size=165197&status=done&style=none&width=474)


## 轨迹异常检测
### 检测异常轨迹

- 单个离群轨迹：一般指在距离度量上，与数据集中的其他轨迹明显不同，比如形状或者行驶时间；
- 一系列的离群轨迹：可能是由于出租车司机故意绕路或者路线变更造成，可以帮助提醒用户走错路；

检测异常轨迹的一般方法是，利用已有的轨迹聚类方法或者多次模式挖掘方法，如果轨迹不属于任何类别，或者不连续，那它可能是异常轨迹。
### 通过轨迹识别异常事件
另一种方法是用过使用许多轨迹信息检测交通状况，包括：交通事故、道路管制、抗议游行、灾难等。
## 轨迹数据的多模态
### 轨迹 -> 图
进行轨迹到图的转换的主要工作是定义图的**节点**和**边，**主要依靠路网
![image.png](https://intranetproxy.alipay.com/skylark/lark/0/2020/png/230552/1594813646715-4794075a-145a-4649-97f7-2c046331f133.png#align=left&display=inline&height=229&margin=%5Bobject%20Object%5D&name=image.png&originHeight=458&originWidth=946&size=610699&status=done&style=none&width=473)

- 在具备路网的条件下：
   - 路网本身是有向图，其中节点表示交叉点，边表示道路路段，在这种条件下，最直观的方法是把轨迹投影到路网上。然后可以根据轨迹信息计算一些权重，如速度和拥堵量等；以此来规划路线、检测交通异常等；
   - 构建地标图：如图19a 
      - T-Drive：智能驾驶方向系统，基于大量的出租车的GPS信息，将出租车经常经过的前k个路段视为路标节点；
   - 划分区域：如图19b，其中节点表示一个区域，边表示两个区域的路线聚合结果；通过这个可以发现一些通勤问题，比如交通流量大的路段、行驶速度慢的路段、行驶时间长的区域。

![image.png](https://intranetproxy.alipay.com/skylark/lark/0/2020/png/230552/1594814031055-e24cc2c9-ab3d-46cd-a3fb-e79c08fbdc36.png#align=left&display=inline&height=197&margin=%5Bobject%20Object%5D&name=image.png&originHeight=394&originWidth=912&size=202012&status=done&style=none&width=456)

- 在完全自由的空间中：首先使用聚类的方法，将关键位置作为原始轨迹的顶点；再通过连接顶点绘制路网图：
   - 旅行推荐：通过检测停驻点并聚类，发现一些人们感兴趣的位置，并且通过收集附近的轨迹信息，挖掘最佳旅行路线并进行推荐；
- 估计用户相似度：

![image.png](https://intranetproxy.alipay.com/skylark/lark/0/2020/png/230552/1594814964945-5d1e749e-c752-48cc-a071-d30849f218d6.png#align=left&display=inline&height=415&margin=%5Bobject%20Object%5D&name=image.png&originHeight=830&originWidth=1164&size=527176&status=done&style=none&width=582)
### 轨迹 -> 矩阵
可以使用如CF(协同过滤)和MF(矩阵分解)的方法帮助我们把轨迹转换成矩阵，帮助补充缺失的观察结果，同时也可以帮助我们识别异常信息。转换的关键问题包括：a. 行表示什么？b. 列表示什么？c. 用什么作为输入？

- 旅行推荐

![image.png](https://intranetproxy.alipay.com/skylark/lark/0/2020/png/230552/1594815799737-9f3bf4b4-b6df-447f-bac3-9eff2d3e22ce.png#align=left&display=inline&height=122&margin=%5Bobject%20Object%5D&name=image.png&originHeight=244&originWidth=1028&size=154542&status=done&style=none&width=514)

- 估计交通情况

![image.png](https://intranetproxy.alipay.com/skylark/lark/0/2020/png/230552/1594815828782-e57355d5-314a-45c4-8572-28617de0d07d.png#align=left&display=inline&height=317&margin=%5Bobject%20Object%5D&name=image.png&originHeight=634&originWidth=908&size=339346&status=done&style=none&width=454)

- 检测交通异常

![image.png](https://intranetproxy.alipay.com/skylark/lark/0/2020/png/230552/1594815852308-b1d8ec22-de85-4dda-b94f-2bb3371db9bf.png#align=left&display=inline&height=234&margin=%5Bobject%20Object%5D&name=image.png&originHeight=468&originWidth=1224&size=409590&status=done&style=none&width=612)
### 轨迹 -> 张量
![image.png](https://intranetproxy.alipay.com/skylark/lark/0/2020/png/230552/1594816128847-0aaab03a-eebb-41e0-bf05-147b3835abdf.png#align=left&display=inline&height=201&margin=%5Bobject%20Object%5D&name=image.png&originHeight=402&originWidth=940&size=224986&status=done&style=none&width=470)
通过对轨迹到矩阵转换的扩展，可以得到轨迹到张量（三维张亮）的转换，可以帮助我们增加更多的信息到数据中，如两个路段或加油站等。可以通过协同过滤将张量与其他上下文进行矩阵分解，以解决张量稀疏的问题。
![image.png](https://intranetproxy.alipay.com/skylark/lark/0/2020/png/230552/1594816147612-1ad92076-5161-43b8-974c-51018e6a641a.png#align=left&display=inline&height=214&margin=%5Bobject%20Object%5D&name=image.png&originHeight=428&originWidth=918&size=136962&status=done&style=none&width=459)
![image.png](https://intranetproxy.alipay.com/skylark/lark/0/2020/png/230552/1594816175727-a92fb5a7-193d-4532-b3f4-c4941a4550f2.png#align=left&display=inline&height=193&margin=%5Bobject%20Object%5D&name=image.png&originHeight=386&originWidth=1048&size=281925&status=done&style=none&width=524)
## 资源
### 公开的轨迹数据集

- GeoLife Data: GeoLife Trajectory Dataset
- T-Drive Data: T-Drive Taxi Trajectories
- Trajectory with transportation modes: GPS Trajectory with Transportation Labels
- User check-in data: Check-in Data from Location-based Social Networks
- HURDAT: Hurricane Trajectories
- The Greek Trucks Dataset: The Greek Truck Trajectories
- Movebank data: Movebank Animal Tracking Data
### 一些交通流量生成器（帮助产生大量的轨迹数据）

- BerlinMode
- Thomas-Brinkhoff
- MNTG (web interface)
- Real-time city-scale taxi ridesharing: 根据北京真实出租车轨迹生成模拟器，用来测试出租车的服务效率
### 相关的期刊和会议

- 数据挖掘会议：**KDD，ICDM, SDM, PAKDD, ICML-PKDD**
- 数据库会议：**ICDE, VLDB, SIGMOD, EDBT, DASFAA**
- 人工智能会议：**IJCAI, AAAI**
- 时空数据专题会议：**ACM SIGSPATIAL GIS, SSTD, MDM**
- 偏应用的会议和研讨会：**International Conference on Ubiquitous Computing, and the International Workshop on Urban Computing**
- 期刊：**IEEE TKDE, ACM TKDD, ACM TIST, VLDB, Data Mining and Knowledge Discovery, KAIS, DKE**
### 展望（Until 2014）
将轨迹与其他数据源结合起来以完成数据挖掘任务：如空气质量推测、未来房价走势推测等。使用更加丰富的轨迹数据，如一些POI和路网数据等，帮助实现更加智能的旅行建议，未来的挑战主要包括：

- 数据管理技术，可以组织多模式数据以进行有效的检索和挖掘；
- 跨域机器学习方法，可以释放无法从单个数据源中发现的知识的力量；
- 先进的可视化技术，可以提供不同来源的见解。
## Preference

1. [Trajectory Data Mining: An Overview](https://www.microsoft.com/en-us/research/publication/trajectory-data-mining-an-overview/)
